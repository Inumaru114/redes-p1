#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

def validar_identificador(ident):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', ident) is not None

def encerrar_conexao(conex):
    usuario = '*'
    if conex in list(usuarios_ativos.values()):
        usuario = next(k for k, v in usuarios_ativos.items() if v == conex)

    conexoes_relacionadas = []
    for canal in canais.values():
        if conex in canal:
            for cliente in canal:
                if cliente != conex and cliente not in conexoes_relacionadas:
                    conexoes_relacionadas.append(cliente)
            canal.remove(conex)

    for cliente in conexoes_relacionadas:
        cliente.enviar(f":{usuario} QUIT :Conexão encerrada\r\n".encode())

    print(f'Conexão {conex} finalizada')
    conex.fechar()
    
    if usuario in usuarios_ativos:
        del usuarios_ativos[usuario]

def responder_ping(conex, conteudo):
    _, _, payload = conteudo.partition(b' ')
    resposta = f":servidor PONG servidor :{payload.decode().strip()}\r\n"
    conex.enviar(resposta.encode())

def tratar_nick(conex, novo_nick):
    nick_atual = next((k for k, v in usuarios_ativos.items() if v == conex), '*')
    
    if not validar_identificador(novo_nick.encode()):
        conex.enviar(f":servidor 432 {nick_atual} {novo_nick} :Identificador inválido\r\n".encode())
        return
    
    if novo_nick.lower() in (k.lower() for k in usuarios_ativos):
        conex.enviar(f":servidor 433 {nick_atual} {novo_nick} :Nick em uso\r\n".encode())
        return
    
    if nick_atual != '*':
        del usuarios_ativos[nick_atual]
    usuarios_ativos[novo_nick.lower()] = conex
    
    if nick_atual == '*':
        conex.enviar(f":servidor 001 {novo_nick} :Bem-vindo ao servidor\r\n".encode())
        conex.enviar(f":servidor 422 {novo_nick} :MOTD indisponível\r\n".encode())
    else:
        conex.enviar(f":{nick_atual} NICK {novo_nick}\r\n".encode())

def formatar_mensagem_join(nick, canal):
    return f":{nick} JOIN :#{canal}\r\n".encode()

def enviar_privado(conex, dados):
    destinatario, _, mensagem = dados.partition(' ')
    alvo = usuarios_ativos.get(destinatario.lower())
    
    if alvo:
        remetente = next((k for k, v in usuarios_ativos.items() if v == conex), '*')
        alvo.enviar(f":{remetente} PRIVMSG {destinatario} :{mensagem}\r\n".encode())

def enviar_grupo(conex, dados):
    canal, _, mensagem = dados.partition(' ')
    grupo = canais.get(canal.lower())
    
    if grupo:
        remetente = next((k for k, v in usuarios_ativos.items() if v == conex), '*')
        for membro in grupo:
            if membro != conex:
                mensagem_formatada = f":{remetente} PRIVMSG {canal} :{mensagem}\r\n".encode()
                membro.enviar(mensagem_formatada)

def rotear_mensagem(conex, dados):
    if dados.startswith('#'):
        enviar_grupo(conex, dados)
    else:
        enviar_privado(conex, dados)

def listar_canais(conex):
    canais_formatados = ' '.join([f"#{nome}" for nome in canais.keys()])
    conex.enviar(f":servidor 321 {conex} Lista de canais :\r\n".encode())
    conex.enviar(f":servidor 322 {conex} {canais_formatados} :Canais ativos\r\n".encode())
    conex.enviar(f":servidor 323 {conex} :Fim da lista\r\n".encode())

def entrar_canal(conex, nome_canal):
    if nome_canal[0] != '#' or not validar_identificador(nome_canal[1:].encode()):
        conex.enviar(f":servidor 403 {nome_canal} :Canal inválido\r\n".encode())
        return
    
    canal = canais.setdefault(nome_canal.lower(), [])
    if conex not in canal:
        canal.append(conex)
    
    nick = next((k for k, v in usuarios_ativos.items() if v == conex), '*')
    
    # Envia JOIN formatado corretamente
    msg_join = formatar_mensagem_join(nick, nome_canal[1:])
    for membro in canal:
        membro.enviar(msg_join)
    
    # Lista de membros
    membros = sorted([u for u, c in usuarios_ativos.items() if c in canal])
    conex.enviar(f":servidor 353 {nick} = {nome_canal} :{' '.join(membros)}\r\n".encode())
    conex.enviar(f":servidor 366 {nick} {nome_canal} :Fim da listagem\r\n".encode())

def sair_canal(conex, parametros):
    canal_nome = parametros.strip().split()[0].lower()
    canal = canais.get(canal_nome)
    
    if canal and conex in canal:
        canal.remove(conex)
        
        nick = next((k for k, v in usuarios_ativos.items() if v == conex), '*')
        aviso = f":{nick} PART {canal_nome}\r\n".encode()
        
        for participante in canal:
            participante.enviar(aviso)
        
        conex.enviar(aviso)
        
        if not canal:
            del canais[canal_nome]

def processar_dados(conex, dados):
    if not dados:
        return encerrar_conexao(conex)
    
    buffer = getattr(conex, 'buffer', b'') + dados
    while b'\r\n' in buffer:
        linha, _, buffer = buffer.partition(b'\r\n')
        partes = linha.decode().split(' ', 1)
        comando = partes[0].upper()
        parametros = partes[1] if len(partes) > 1 else ''
        
        if comando == 'PING':
            responder_ping(conex, linha)
        elif comando == 'NICK':
            tratar_nick(conex, parametros.split()[0])
        elif comando == 'PRIVMSG':
            rotear_mensagem(conex, parametros)
        elif comando == 'JOIN':
            entrar_canal(conex, parametros.split()[0])
        elif comando == 'PART':
            sair_canal(conex, parametros)
        elif comando == 'LISTA':
            listar_canais(conex)
    
    conex.buffer = buffer

def nova_conexao(conex):
    print(f'Nova conexão: {conex}')
    conex.buffer = b''
    conex.registrar_recebedor(lambda d: processar_dados(conex, d))

usuarios_ativos = {}
canais = {}

servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(nova_conexao)
asyncio.get_event_loop().run_forever()
